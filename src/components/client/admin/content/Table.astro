---
import { getCollection } from 'astro:content'

import { render } from '$lib/server/ssrLit.ts'
import { catchErrorTyped } from "$lib/utils/index.ts";

import { templateTable } from './table.ts'

const { content } = Astro.props
const {error, data: collection} = await catchErrorTyped(getCollection(
  content === "post" ? "posts" : "modules",
))

if (error)  throw new Error(`Failed to fetch ${content}: ${error}`)

const filtered = collection
  // @ts-ignorea: NOTE: `data` is not typed in Astro's content collections
  .sort((a, b) => new Date(b.data.publish) < new Date(a.data.publish))
  .slice(0, 3)

const renderContent = render(templateTable(filtered.map(entry => ({ ...entry.data }))))
---

<style>
  @media (max-width: 575.98px) {
    table {
      font-size: 1rem;
    }
  }
</style>

<wl-database
  data-table={content}
  live={true}
  target="tbody">
  <table class="table table-hover">
    <thead>
      <tr>
        <th scope="col" class="border-end">Title</th>
        <th scope="col" class="d-none d-lg-table-cell border-end">Author</th>
        <th scope="col" class="d-none d-md-table-cell border-end">Published</th>
        <th scope="col" class="border-end">Draft</th>
        <th scope="col" class="d-none d-md-table-cell border-end">Likes</th>
        <th scope="col" class="text-center">Actions</th>
      </tr>
    </thead>

    <tbody id="tbody" set:html={renderContent}></tbody>
  </table>
</wl-database>
